// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Puma.Prey.Rabbit.Context;

namespace Puma.Prey.Rabbit.Migrations
{
    [DbContext(typeof(RabbitDBContext))]
    [Migration("20220218164728_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.Animal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("SafariId")
                        .HasColumnType("int");

                    b.Property<string>("Species")
                        .HasColumnType("longtext");

                    b.Property<string>("Weight")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("SafariId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("PumaRoles");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("PumaRoleClaims");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("BillingAddress1")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingAddress2")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingCity")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingState")
                        .HasColumnType("longtext");

                    b.Property<string>("BillingZip")
                        .HasColumnType("longtext");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("CreditCardExpiration")
                        .HasColumnType("longtext");

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasAlternateKey("MemberId");

                    b.HasIndex("MemberId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("PumaUsers");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PumaUserClaims");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("PumaUserLogins");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("PumaUserRoles");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("PumaUserTokens");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.Safari", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Safaris");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.SafariUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PumaUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("SafariId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PumaUserId");

                    b.HasIndex("SafariId", "PumaUserId");

                    b.ToTable("SafariUsers");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.Animal", b =>
                {
                    b.HasOne("Puma.Prey.Rabbit.Models.Safari", "Safari")
                        .WithMany("Animals")
                        .HasForeignKey("SafariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Safari");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaRoleClaim", b =>
                {
                    b.HasOne("Puma.Prey.Rabbit.Models.PumaRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUser", b =>
                {
                    b.OwnsMany("Puma.Prey.Rabbit.Models.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            b1.Property<DateTime>("Created")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("CreatedByIp")
                                .HasColumnType("longtext");

                            b1.Property<DateTime>("Expires")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("PumaUserId")
                                .IsRequired()
                                .HasColumnType("varchar(255)");

                            b1.Property<string>("ReasonRevoked")
                                .HasColumnType("longtext");

                            b1.Property<string>("ReplacedByToken")
                                .HasColumnType("longtext");

                            b1.Property<DateTime?>("Revoked")
                                .HasColumnType("datetime(6)");

                            b1.Property<string>("RevokedByIp")
                                .HasColumnType("longtext");

                            b1.Property<string>("Token")
                                .HasColumnType("longtext");

                            b1.HasKey("Id");

                            b1.HasIndex("PumaUserId");

                            b1.ToTable("RefreshToken");

                            b1.WithOwner()
                                .HasForeignKey("PumaUserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserClaim", b =>
                {
                    b.HasOne("Puma.Prey.Rabbit.Models.PumaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserLogin", b =>
                {
                    b.HasOne("Puma.Prey.Rabbit.Models.PumaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserRole", b =>
                {
                    b.HasOne("Puma.Prey.Rabbit.Models.PumaRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Puma.Prey.Rabbit.Models.PumaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUserToken", b =>
                {
                    b.HasOne("Puma.Prey.Rabbit.Models.PumaUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.SafariUser", b =>
                {
                    b.HasOne("Puma.Prey.Rabbit.Models.PumaUser", "PumaUser")
                        .WithMany("SafariUsers")
                        .HasForeignKey("PumaUserId");

                    b.HasOne("Puma.Prey.Rabbit.Models.Safari", "Safaris")
                        .WithMany("SafariUsers")
                        .HasForeignKey("SafariId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PumaUser");

                    b.Navigation("Safaris");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.PumaUser", b =>
                {
                    b.Navigation("SafariUsers");
                });

            modelBuilder.Entity("Puma.Prey.Rabbit.Models.Safari", b =>
                {
                    b.Navigation("Animals");

                    b.Navigation("SafariUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
